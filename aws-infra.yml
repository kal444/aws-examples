---
- hosts: localhost
  connection: local
  gather_facts: false

  vars:
    - region_id: us-west-2
      vpc_id: vpc-xxxx
      subnet_id: subnet-xxxx
      image_id: ami-xxx
      iam_role: role_name
      keypair: keypair_name
      default_tags:
        Name: PROJECT
        Automation: ansible

  tasks:
    - name: set up IP range whilte list security group for certain ISPs
      ec2_group:
        name: ISP specific IP Ranges Whitelist (KC)
        description: Whitelist some ISP specific IP Ranges
        region: "{{ region_id }}"
        vpc_id: "{{ vpc_id }}"
        rules:
          # for Google Fiber ARIN
          - proto: all
            cidr_ip: 136.32.0.0/11
      register: sgisp
    - debug: var=sgisp verbosity=1

    - name: tag all security groups
      ec2_tag:
        region: "{{ region_id }}"
        resource: "{{ item.group_id }}"
        tags: "{{ default_tags }}"
      with_items:
        - "{{ sgisp }}"

    - name: start instances
      ec2:
        exact_count: 1
        count_tag:
          Function: "Gitlab"
        assign_public_ip: yes
        image: "{{ image_id }}"
        key_name: "{{ keypair }}"
        instance_type: t2.micro
        region: "{{ region_id }}"
        vpc_subnet_id: "{{ subnet_id }}"
        instance_profile_name: "{{ iam_role }}"
        group_id: [ "{{ sgisp.group_id }}" ]
        volumes:
          - device_name: /dev/sdb
            volume_type: gp2
            volume_size: 10
            delete_on_termination: true
        wait: yes
        instance_tags: "{{ default_tags | combine( {'Function':'Gitlab'} ) }}"
      register: ec2
    - debug: var=ec2 verbosity=1

    - name: finding volumes for tagging
      ec2_vol:
        instance: "{{ item.id }}"
        region: "{{ region_id }}"
        state: list
      with_items: "{{ ec2.tagged_instances }}"
      # register with a loop stores result in "results"
      register: ec2_vol
      loop_control:
        label: "{{ item.id }}"
    - debug: var=ec2_vol verbosity=1

    - name: tag volumes
      ec2_tag:
        region: "{{ region_id }}"
        resource: "{{ item.1.id }}"
        tags: "{{ default_tags }}"
      with_subelements:
        - "{{ ec2_vol.results }}"
        - volumes
      loop_control:
        label: "{{ item.1.id }}"

